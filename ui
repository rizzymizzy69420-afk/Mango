-- ui.lua
-- PhantomUI (Rayfield-style API)
-- CreateWindow -> CreateTab -> CreateSection -> Create[Button|Toggle|Slider|Dropdown|TextBox]
-- Persistence: saves to Phantom/config.json (if executor supports writefile/readfile/makefolder/isfile)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

-- Executor file API detection
local hasWriteFile = type(writefile) == "function"
local hasReadFile  = type(readfile) == "function"
local hasIsFile    = type(isfile) == "function"
local hasMakeFolder = type(makefolder) == "function"

local PHANTOM_FOLDER = "Phantom"
local CONFIG_PATH = PHANTOM_FOLDER .. "/config.json"

if hasMakeFolder then
    pcall(function() makefolder(PHANTOM_FOLDER) end)
end

-- Safe file functions
local function safeWrite(path, content)
    if not hasWriteFile then return false, "no writefile" end
    return pcall(function() writefile(path, content) end)
end
local function safeRead(path)
    if not hasReadFile or not hasIsFile then return false, "no readfile/isfile" end
    if not isfile(path) then return false, "not exists" end
    local ok, content = pcall(function() return readfile(path) end)
    if not ok then return false, content end
    return true, content
end

-- Load config if available
local Config = {}
do
    local ok, content = safeRead(CONFIG_PATH)
    if ok then
        local suc, decoded = pcall(function() return HttpService:JSONDecode(content) end)
        if suc and type(decoded) == "table" then
            Config = decoded
        else
            Config = {}
        end
    else
        Config = {}
    end
end

local function saveConfig()
    local encoded = HttpService:JSONEncode(Config)
    if hasWriteFile then
        pcall(function() writefile(CONFIG_PATH, encoded) end)
    end
end

-- Utility constructors
local function create(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

local function tween(obj, props, t)
    t = t or 0.2
    local info = TweenInfo.new(t, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tw = TweenService:Create(obj, info, props)
    tw:Play()
    return tw
end

local function clamp(n, a, b) return math.max(a, math.min(b, n)) end

-- Theme
local THEME = {
    primary = Color3.fromRGB(20,20,22),
    panel = Color3.fromRGB(28,28,30),
    accent = Color3.fromRGB(0,150,255),
    text = Color3.fromRGB(235,235,235),
    sub = Color3.fromRGB(170,170,175),
    stroke = Color3.fromRGB(60,60,65),
    transparency = 0.25,
}

-- Root ScreenGui
local ScreenGui = create("ScreenGui", {Name = "PhantomUI", ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling})
ScreenGui.Parent = game:GetService("CoreGui")

-- Shadow image used for drop shadow
local SHADOW_IMAGE = "rbxassetid://1316045217"

-- Module table to return
local Module = {}

-- Creates a main window (Rayfield-style CreateWindow)
-- opts: table {Name="...", IntroText="...", LoadingTitle="...", width, height}
function Module:CreateWindow(opts)
    opts = opts or {}
    local titleText = opts.Name or opts.Title or "Phantom Hub"
    local width = opts.width or 640
    local height = opts.height or 460
    local edgeDrag = opts.edgeDrag or 18

    local W = {}
    W._tabs = {}

    -- Root frame
    local root = create("Frame", {
        Name = "PhantomRoot",
        Size = UDim2.new(0, width, 0, height),
        Position = UDim2.new(0.5, -width/2, 0.5, -height/2),
        BackgroundColor3 = THEME.primary,
        BackgroundTransparency = THEME.transparency,
        BorderSizePixel = 0,
        Parent = ScreenGui,
        ZIndex = 10,
        ClipsDescendants = true,
    })

    -- shadow
    local shadow = create("ImageLabel", {
        Name = "Shadow",
        Size = UDim2.new(1, 24, 1, 24),
        Position = UDim2.new(0, -12, 0, -12),
        BackgroundTransparency = 1,
        Image = SHADOW_IMAGE,
        ImageColor3 = Color3.new(0,0,0),
        ImageTransparency = 0.7,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10,10,118,118),
        Parent = root,
    })

    -- panel
    local panel = create("Frame", {
        Name = "Panel",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = THEME.panel,
        BackgroundTransparency = 0.18,
        Parent = root,
    })
    create("UICorner", {CornerRadius = UDim.new(0, 12), Parent = panel})
    create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = panel})

    -- titlebar
    local titleBar = create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0,0,0,0),
        BackgroundColor3 = Color3.fromRGB(14,14,16),
        BackgroundTransparency = 0.12,
        Parent = panel,
    })
    create("UICorner", {CornerRadius = UDim.new(0,12), Parent = titleBar})

    local titleLabel = create("TextLabel", {
        Text = "  "..tostring(titleText),
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextColor3 = THEME.text,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,8,0,0),
        Size = UDim2.new(1, -80, 1, 0),
        Parent = titleBar,
    })

    -- close button
    local closeBtn = create("TextButton", {
        Text = "X",
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(230,70,70),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 44, 1, 0),
        Position = UDim2.new(1, -48, 0, 0),
        Parent = titleBar,
        AutoButtonColor = false
    })
    closeBtn.MouseEnter:Connect(function() closeBtn.TextColor3 = Color3.fromRGB(255,110,110) end)
    closeBtn.MouseLeave:Connect(function() closeBtn.TextColor3 = Color3.fromRGB(230,70,70) end)

    -- toggle show button
    local reopenBtn = create("TextButton", {
        Name = "Reopen",
        Text = titleText,
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        TextColor3 = THEME.text,
        BackgroundColor3 = THEME.panel,
        BackgroundTransparency = 0.18,
        Size = UDim2.new(0, 140, 0, 34),
        Position = UDim2.new(0, 12, 0, 12),
        Visible = false,
        Parent = ScreenGui,
        AutoButtonColor = false,
    })
    create("UICorner", {CornerRadius = UDim.new(0,8), Parent = reopenBtn})
    create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = reopenBtn})

    reopenBtn.MouseButton1Click:Connect(function()
        root.Visible = true
        reopenBtn.Visible = false
    end)

    closeBtn.MouseButton1Click:Connect(function()
        root.Visible = false
        reopenBtn.Visible = true
        -- save config when closing
        saveConfig()
    end)

    -- left tabs column
    local left = create("Frame", {
        Name = "Left",
        Parent = panel,
        Size = UDim2.new(0, 150, 1, -40),
        Position = UDim2.new(0,0,0,40),
        BackgroundTransparency = 1,
    })
    create("UICorner", {CornerRadius = UDim.new(0,8), Parent = left})
    local tabList = create("Frame", {Parent = left, Size = UDim2.new(1, -12, 1, -18), Position = UDim2.new(0,8,0,8), BackgroundTransparency = 1})
    create("UIListLayout", {Padding = UDim.new(0,8), SortOrder = Enum.SortOrder.LayoutOrder, Parent = tabList})

    -- content area
    local content = create("Frame", {
        Name = "Content",
        Parent = panel,
        Size = UDim2.new(1, -150, 1, -40),
        Position = UDim2.new(0, 150, 0, 40),
        BackgroundTransparency = 1,
    })
    create("UIPadding", {Parent = content, PaddingTop = UDim.new(0,8), PaddingLeft = UDim.new(0,10)})
    local contentLayout = create("UIListLayout", {Parent = content, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8)})

    -- Dragging implementation: titlebar + edge drag
    local dragging = false
    local dragInput = nil
    local dragStart = nil
    local startPos = nil
    local function clampToView(x,y)
        local view = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920,1080)
        local w = root.AbsoluteSize.X
        local h = root.AbsoluteSize.Y
        local nx = clamp(x, 0, view.X - w)
        local ny = clamp(y, 0, view.Y - h)
        return nx, ny
    end

    local function beginDrag(input)
        dragging = true
        dragInput = input
        dragStart = input.Position
        startPos = Vector2.new(root.AbsolutePosition.X, root.AbsolutePosition.Y)
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
                dragInput = nil
                -- save position
                local key = (titleText.."_pos")
                Config[key] = { x = root.AbsolutePosition.X, y = root.AbsolutePosition.Y }
                saveConfig()
            end
        end)
    end

    local function inputChanged(input)
        if dragging and input == dragInput and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            local newX = startPos.X + delta.X
            local newY = startPos.Y + delta.Y
            newX, newY = clampToView(newX, newY)
            root.Position = UDim2.new(0, newX, 0, newY)
        end
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            beginDrag(input)
        end
    end)

    root.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local pos = input.Position
            local relx = pos.X - root.AbsolutePosition.X
            local rely = pos.Y - root.AbsolutePosition.Y
            local area = edgeDrag
            if relx <= area or relx >= root.AbsoluteSize.X - area or rely <= area or rely >= root.AbsoluteSize.Y - area then
                beginDrag(input)
            end
        end
    end)

    UserInputService.InputChanged:Connect(inputChanged)

    -- restore position if saved
    local posKey = (titleText.."_pos")
    if Config[posKey] and type(Config[posKey]) == "table" then
        local p = Config[posKey]
        local nx, ny = clampToView(p.x or 0, p.y or 0)
        root.Position = UDim2.new(0, nx, 0, ny)
    end

    ---- API functions for window ----

    -- Create Tab
    function W:CreateTab(name)
        local tabBtn = create("TextButton", {
            Text = "  "..tostring(name),
            Parent = tabList,
            BackgroundTransparency = 1,
            Font = Enum.Font.GothamSemibold,
            TextSize = 14,
            TextColor3 = THEME.text,
            Size = UDim2.new(1, 0, 0, 36),
            AutoButtonColor = false,
        })
        create("UICorner", {CornerRadius = UDim.new(0,6), Parent = tabBtn})
        create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = tabBtn})

        -- page container
        local page = create("Frame", {
            Name = name.."_Page",
            Parent = content,
            Size = UDim2.new(1, -20, 1, -20),
            Position = UDim2.new(0, 10, 0, 10),
            BackgroundTransparency = 1,
            Visible = false,
        })
        create("UIListLayout", {Parent = page, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8)})
        create("UIPadding", {Parent = page, PaddingTop = UDim.new(0,8), PaddingLeft = UDim.new(0,8)})

        local tabObj = {}
        tabObj.Button = tabBtn
        tabObj.Page = page

        -- Select tab
        tabBtn.MouseButton1Click:Connect(function()
            for _, t in ipairs(W._tabs) do
                t.Button.BackgroundTransparency = 1
                t.Button.TextColor3 = THEME.text
                t.Page.Visible = false
            end
            tabBtn.BackgroundTransparency = 0.12
            tabBtn.TextColor3 = THEME.accent
            page.Visible = true
        end)

        -- Section creation inside tab (logical grouping)
        function tabObj:CreateSection(sectionName)
            local secFrame = create("Frame", {Size = UDim2.new(1,0,0,0), BackgroundTransparency = 1, Parent = page})
            local secLayout = create("UIListLayout", {Parent = secFrame, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,6)})
            local secPadding = create("UIPadding", {Parent = secFrame, PaddingTop = UDim.new(0,6), PaddingLeft = UDim.new(0,6)})
            local secTitle = create("TextLabel", {
                Text = sectionName,
                Font = Enum.Font.GothamBold,
                TextSize = 16,
                TextColor3 = THEME.text,
                BackgroundTransparency = 1,
                Size = UDim2.new(1,0,0,20),
                Parent = secFrame,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            -- API inside section
            local Section = {}

            function Section:CreateButton(text, callback)
                local b = create("TextButton", {
                    Text = text,
                    Font = Enum.Font.GothamBold,
                    TextSize = 15,
                    TextColor3 = THEME.text,
                    BackgroundColor3 = Color3.fromRGB(45,45,50),
                    Size = UDim2.new(1, 0, 0, 36),
                    Parent = secFrame,
                })
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = b})
                create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = b})
                b.MouseButton1Click:Connect(function()
                    if type(callback) == "function" then
                        local suc, err = pcall(callback)
                        if not suc then warn("Button callback error:", err) end
                    end
                end)
                return b
            end

            function Section:CreateToggle(text, default, callback, id)
                local container = create("Frame", {Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1, Parent = secFrame})
                local label = create("TextLabel", {
                    Text = text,
                    Font = Enum.Font.Gotham,
                    TextSize = 15,
                    TextColor3 = THEME.text,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,0),
                    Size = UDim2.new(0.75,0,1,0),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = container,
                })
                local btn = create("TextButton", {Size = UDim2.new(0,36,0,22), Position = UDim2.new(1, -46, 0, 7), Parent = container, AutoButtonColor = false})
                create("UICorner", {CornerRadius = UDim.new(0,8), Parent = btn})
                create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = btn})

                local state = default or false
                if id and type(Config[id]) ~= "nil" then
                    state = Config[id]
                end
                local function updateVisual()
                    if state then btn.BackgroundColor3 = Color3.fromRGB(40,200,110) else btn.BackgroundColor3 = Color3.fromRGB(90,90,95) end
                end
                updateVisual()
                btn.MouseButton1Click:Connect(function()
                    state = not state
                    if id then Config[id] = state; saveConfig() end
                    updateVisual()
                    if type(callback) == "function" then pcall(callback, state) end
                end)

                -- run callback initially to restore behavior
                if type(callback) == "function" then pcall(callback, state) end

                return btn
            end

            function Section:CreateSlider(text, min, max, default, callback, id)
                min = min or 0; max = max or 100; default = default or min
                local frame = create("Frame", {Size = UDim2.new(1,0,0,50), BackgroundTransparency = 1, Parent = secFrame})
                local label = create("TextLabel", {
                    Text = text .. ": " .. tostring(default),
                    Font = Enum.Font.Gotham,
                    TextSize = 14,
                    TextColor3 = THEME.text,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,0),
                    Size = UDim2.new(1,-12,0,18),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = frame,
                })
                local bar = create("Frame", {Size = UDim2.new(1,-12,0,12), Position = UDim2.new(0,6,0,30), BackgroundColor3 = Color3.fromRGB(60,60,68), Parent = frame})
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = bar})
                local fill = create("Frame", {Size = UDim2.new(0,0,1,0), BackgroundColor3 = THEME.accent, Parent = bar})
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = fill})

                local val = default
                if id and type(Config[id]) == "number" then val = Config[id] end
                local pct = (max > min) and clamp((val - min)/(max - min), 0, 1) or 0
                fill.Size = UDim2.new(pct, 0, 1, 0)
                label.Text = text .. ": " .. tostring(val)
                if type(callback) == "function" then pcall(callback, val) end

                local dragging = false
                local function updateFromX(px)
                    local rel = clamp(px - bar.AbsolutePosition.X, 0, bar.AbsoluteSize.X)
                    local p = rel / bar.AbsoluteSize.X
                    local v = math.floor(min + (max - min) * p + 0.5)
                    fill.Size = UDim2.new(p, 0, 1, 0)
                    label.Text = text .. ": " .. tostring(v)
                    val = v
                    if id then Config[id] = val; saveConfig() end
                    if type(callback) == "function" then pcall(callback, val) end
                end
                bar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        updateFromX(input.Position.X)
                    end
                end)
                bar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateFromX(input.Position.X)
                    end
                end)

                return frame
            end

            function Section:CreateDropdown(text, options, defaultIndex, callback, id)
                options = options or {}
                defaultIndex = defaultIndex or 1
                local frame = create("Frame", {Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1, Parent = secFrame})
                local label = create("TextLabel", {
                    Text = text,
                    Font = Enum.Font.Gotham,
                    TextSize = 15,
                    TextColor3 = THEME.text,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,6),
                    Size = UDim2.new(0.5,0,1,0),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = frame,
                })
                local sel = create("TextButton", {
                    Text = options[defaultIndex] or "Select",
                    BackgroundColor3 = Color3.fromRGB(50,50,55),
                    TextColor3 = THEME.text,
                    Font = Enum.Font.Gotham,
                    TextSize = 14,
                    Size = UDim2.new(0, 160, 1, -8),
                    Position = UDim2.new(1, -170, 0, 4),
                    Parent = frame,
                    AutoButtonColor = false,
                })
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = sel})
                create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = sel})

                local drop = create("Frame", {
                    BackgroundColor3 = Color3.fromRGB(30,30,36),
                    Size = UDim2.new(0, 160, 0, 0),
                    Position = UDim2.new(1, -170, 1, 6),
                    Parent = frame,
                    ClipsDescendants = true,
                })
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = drop})
                create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = drop})
                local list = create("UIListLayout", {Parent = drop, Padding = UDim.new(0,4)})

                local function closeDrop()
                    tween(drop, {Size = UDim2.new(0,160,0,0)}, 0.18)
                end
                local function openDrop()
                    local height = clamp(#options * 30, 0, 180)
                    tween(drop, {Size = UDim2.new(0,160,0,height)}, 0.18)
                end

                -- restore
                if id and type(Config[id]) == "string" then
                    sel.Text = Config[id]
                    if type(callback) == "function" then pcall(callback, sel.Text) end
                else
                    sel.Text = options[defaultIndex] or "Select"
                end

                for i,opt in ipairs(options) do
                    local optBtn = create("TextButton", {
                        Text = opt,
                        Size = UDim2.new(1, -12, 0, 28),
                        Position = UDim2.new(0,6,0, 6 + (i-1)*30),
                        Parent = drop,
                        AutoButtonColor = false,
                        BackgroundColor3 = Color3.fromRGB(45,45,50),
                        TextColor3 = THEME.text,
                        Font = Enum.Font.Gotham,
                        TextSize = 14,
                    })
                    create("UICorner", {CornerRadius = UDim.new(0,6), Parent = optBtn})
                    optBtn.MouseButton1Click:Connect(function()
                        sel.Text = opt
                        if id then Config[id] = opt; saveConfig() end
                        if type(callback) == "function" then pcall(callback, opt) end
                        closeDrop()
                    end)
                end

                sel.MouseButton1Click:Connect(function()
                    if drop.Size.Y.Offset == 0 then
                        openDrop()
                    else
                        closeDrop()
                    end
                end)

                return sel
            end

            function Section:CreateTextBox(placeholder, callback, id)
                local box = create("TextBox", {
                    PlaceholderText = placeholder or "",
                    Text = "",
                    BackgroundColor3 = Color3.fromRGB(45,45,50),
                    TextColor3 = THEME.text,
                    Font = Enum.Font.Gotham,
                    TextSize = 14,
                    Size = UDim2.new(1, -12, 0, 34),
                    Position = UDim2.new(0,6,0,0),
                    Parent = secFrame,
                })
                create("UICorner", {CornerRadius = UDim.new(0,6), Parent = box})
                create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = box})

                if id and type(Config[id]) == "string" then
                    box.Text = Config[id]
                    if type(callback) == "function" then pcall(callback, box.Text) end
                end

                box.FocusLost:Connect(function(enter)
                    if enter and id then Config[id] = box.Text; saveConfig() end
                    if enter and type(callback) == "function" then pcall(callback, box.Text) end
                end)

                return box
            end

            return Section
        end

        table.insert(W._tabs, tabObj)
        -- auto-select first tab
        if #W._tabs == 1 then
            tabBtn:CaptureFocus()
            tabBtn.BackgroundTransparency = 0.12
            tabBtn.TextColor3 = THEME.accent
            page.Visible = true
            W.SelectedTab = tabObj
        end

        return tabObj
    end

    -- Notifications (window-level)
    function W:Notify(opts)
        -- opts: table or string
        local title, content, duration = "Notification", "", 3
        if type(opts) == "string" then content = opts
        elseif type(opts) == "table" then
            title = opts.Title or opts.title or title
            content = opts.Content or opts.content or content
            duration = opts.Duration or opts.duration or duration
        end

        local notifFolder = script:FindFirstChild("NotifFolder") or create("Folder", {Name = "NotifFolder", Parent = ScreenGui})
        local count = #notifFolder:GetChildren()
        local nf = create("Frame", {
            Size = UDim2.new(0, 320, 0, 68),
            Position = UDim2.new(1, -340, 0, 12 + (count * 78)),
            BackgroundColor3 = Color3.fromRGB(35,35,40),
            BackgroundTransparency = 0.2,
            Parent = notifFolder,
            ZIndex = 999,
        })
        create("UICorner", {CornerRadius = UDim.new(0,8), Parent = nf})
        create("UIStroke", {Color = THEME.stroke, Thickness = 1, Parent = nf})
        local tL = create("TextLabel", {Text = title, Font = Enum.Font.GothamBold, TextSize = 14, TextColor3 = THEME.text, BackgroundTransparency = 1, Position = UDim2.new(0,10,0,8), Size = UDim2.new(1,-20,0,18), Parent = nf})
        local dL = create("TextLabel", {Text = content, Font = Enum.Font.Gotham, TextSize = 13, TextColor3 = THEME.sub, BackgroundTransparency = 1, Position = UDim2.new(0,10,0,28), Size = UDim2.new(1,-20,0,36), TextWrapped = true, Parent = nf})
        nf.Position = UDim2.new(1, 340, 0, 12 + (count * 78))
        tween(nf, {Position = UDim2.new(1, -340, 0, 12 + (count * 78))}, 0.28)

        task.delay(duration, function()
            if nf and nf.Parent then
                tween(nf, {Position = UDim2.new(1, 340, 0, 12 + (count * 78))}, 0.28)
                task.wait(0.3)
                pcall(function() nf:Destroy() end)
            end
        end)
    end

    -- expose root/frame for external use
    W.Root = root
    W.Panel = panel
    W.SaveConfig = saveConfig
    W._Config = Config

    -- return window object
    return W
end

-- Return Module
return Module
